// Generated by CoffeeScript 1.7.1
(function() {
  var blinkCursor, initializeRepl,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.jqconsole = $('#console').jqconsole("SHALL WE PLAY A GAME?\n", '> ');

  
jqconsole.RegisterShortcut('Z', function() {
  jqconsole.AbortPrompt();
  handler();
});

// Move to line start Ctrl+A.
jqconsole.RegisterShortcut('A', function() {
  jqconsole.MoveToStart();
  handler();
});

// Move to line end Ctrl+E.
jqconsole.RegisterShortcut('E', function() {
  jqconsole.MoveToEnd();
  handler();
});

jqconsole.RegisterMatching('{', '}', 'brace');
jqconsole.RegisterMatching('(', ')', 'paran');
jqconsole.RegisterMatching('[', ']', 'bracket');
;

  blinkCursor = function() {
    var cursor;
    cursor = $(".jqconsole-cursor");
    if (cursor.css("opacity") === "1") {
      return cursor.css({
        "opacity": 0
      });
    } else {
      return cursor.css({
        'opacity': 1
      });
    }
  };

  setInterval(blinkCursor, 650);

  initializeRepl = function() {
    var BLOCK_OPENERS, TOKENS, errorCallback, inputCallback, multiLineHandler, outputCallback, promptHandler, resultCallback, startPrompt;
    inputCallback = function(callback) {
      return jqconsole.Input((function(_this) {
        return function(result) {
          var e;
          try {
            return callback(result);
          } catch (_error) {
            e = _error;
            return _this.ErrorCallback(e);
          }
        };
      })(this));
    };
    outputCallback = function(string) {
      return jqconsole.Write("" + string, "repl-output");
    };
    resultCallback = function(string) {
      return jqconsole.Write(" => " + string + "\n", "repl-result");
    };
    errorCallback = function(string) {
      return jqconsole.Write("" + string, "repl-error");
    };
    this.jsrepl = new JSREPL({
      input: inputCallback,
      output: outputCallback,
      result: resultCallback,
      error: errorCallback
    });
    jsrepl.loadLanguage("ruby", function() {
      jqconsole.Write("done.\n");
      if (typeof lesson !== "undefined" && lesson !== null) {
        return jqconsole.Write(lesson.currentQuestion().description + "\n", "repl-lesson");
      }
    });
    promptHandler = function(input) {
      var question;
      if ((typeof lesson !== "undefined" && lesson !== null) && !lesson.isDone) {
        question = lesson.currentQuestion();
        question.evaluate(input);
        if (question.isRightAnswer) {
          lesson.next();
          if (!lesson.isDone) {
            jqconsole.Write(lesson.currentQuestion().description + "\n", "repl-lesson");
          }
        } else {
          jqconsole.Write(question.error_message + "\n", "repl-lesson");
        }
      }
      jsrepl["eval"](input);
      return startPrompt();
    };
    multiLineHandler = function(command) {
      var braces, brackets, last_line_changes, levels, line, parens, token, _i, _j, _len, _len1, _ref, _ref1;
      levels = 0;
      parens = 0;
      braces = 0;
      brackets = 0;
      last_line_changes = 0;
      _ref = command.split('\n');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        last_line_changes = 0;
        _ref1 = line.match(TOKENS) || [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          token = _ref1[_j];
          if (__indexOf.call(BLOCK_OPENERS, token) >= 0) {
            levels++;
            last_line_changes++;
          } else if (token === '(') {
            parens++;
            last_line_changes++;
          } else if (token === '{') {
            braces++;
            last_line_changes++;
          } else if (token === '[') {
            brackets++;
            last_line_changes++;
          } else if (token === 'end') {
            levels--;
            last_line_changes--;
          } else if (token === ')') {
            parens--;
            last_line_changes--;
          } else if (token === ']') {
            braces--;
            last_line_changes--;
          } else if (token === '}') {
            brackets--;
            last_line_changes--;
          }
          if (levels < 0 || parens < 0 || braces < 0 || brackets < 0) {
            return false;
          }
        }
      }
      if (levels > 0 || parens > 0 || braces > 0 || brackets > 0) {
        if (last_line_changes > 0) {
          return 1;
        } else if (last_line_changes < 0) {
          return -1;
        } else {
          return 0;
        }
      } else {
        return false;
      }
    };
    startPrompt = function() {
      return jqconsole.Prompt(true, promptHandler, multiLineHandler);
    };
    startPrompt();
    BLOCK_OPENERS = ["begin", "module", "def", "class", "if", "unless", "case", "for", "while", "until", "do"];
    return TOKENS = /\s+|\d+(?:\.\d*)?|"(?:[^"]|\\.)*"|'(?:[^']|\\.)*'|\/(?:[^\/]|\\.)*\/|[-+\/*]|[<>=]=?|:?[a-z@$][\w?!]*|[{}()\[\]]|[^\w\s]+/ig;
  };

  $(".jqconsole").click(function() {
    if (typeof jsrepl === "undefined" || jsrepl === null) {
      jqconsole.Write("Loading...");
      return initializeRepl();
    }
  });

}).call(this);
